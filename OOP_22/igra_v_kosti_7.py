# Игра в кости


# Атрибуты класса:
# Компьютор загадывает два числа от 1 до 6, которые присваиваются переменным
# Количество попыток - переменная

# Методы:
# метод init инициализации игры - на вход принимает количество попыток
# настройка параметров - компьютер будет загадывать числа
# метод бросания костей
# выбор режима игры:
# - совпало одно число
# - совпало два числа
# - совпала сумма
# Это те события, при которых происходит выигрыш.

import random


class Dice:
    def __init__(self, N):  # принимает на вход количество бросков (попыток)
        self.throw_num = N  # установленное количество бросков передаем переменной
        self.current_throw = 0  # количество текущих бросков

    # Настройка параметров

    # Метод загадывания числа
    # Здесь есть скрытые параметры, к которым нельзя давать доступ. Это hidden_num.
    # Пользователю нет необходимости знать об этих параметрах. Поэтому применим к ним метод инкапсуляции
    # В Питоне все скрытые параметры пишутся через "две земли" __hidden_num
    # Параметры с двойной землей категорически нельзя менять и они скрываются
    def set_hidden_numbers(self):
        self._hidden_num_1 = random.randint(1, 6)  # получаем первое рандомное число
        self._hidden_num_2 = random.randint(1, 6)  # получаем второе рандомное число
        # С применением инкапсуляции эти параметры теперь будут использованы только внутри класса

    # Метод бросания костей
    # Если полученные значения совпадут со значениями, полученные в методе set_hidden_nummbers - это выигрыш.

    def throw_daces(self):
        dice_1 = random.randint(1, 6)  # первая кость
        dice_2 = random.randint(1, 6)  # вторая кость
        self.current_throw += 1  # считаем количество попыток
        if self.current_throw > self.throw_num:  # если кол-во попыток превышают установленное значение попыток
            raise Exception('Вы привысили количество попыток')  # выбрасываем исключение
        if {dice_1, dice_2} == {self._hidden_num_1, self._hidden_num_2}:
            return True
        else:
            return False


if __name__ == '__main__':
    dice_game = Dice(5)  # создаем объект "Новый заход" класса Dice и передаем количество бросков
    dice_game.set_hidden_numbers()  # применяем к нему метод set_hidden_nummbers()
    # print(dice_game.__hidden_num_1, dice_game.__hidden_num_2)
    # Так как параметры __hidden_num_1, __hidden_num_2 строго инкапсулированны - двойная земля,
    # то при попытке их вывести, будет выдана ошибка, что их не существует.
    # Хотя, можно ограничется и одной землей _hidden_num. Это визуально говорит о том, что данный метод инкапсулирован
    # но доступ к нему будет.
    for i in range(6):
        try:
            print(dice_game.throw_daces())
        except:
            print('Игра закончена')

