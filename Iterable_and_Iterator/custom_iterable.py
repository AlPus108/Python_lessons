# Создание собственных объектов itrable
# Мы уже использовали ф-ю range(), которая возвращает последовательность чисел,
# в диапазоне, заданном параметрами этой ф-и

for number in range(1, 10):
    print(number)

# Создадим класс, повторяющий функционал ф-и range()

# class MyRange():
#     def __init__(self, start, end):
#         self.start = start
#         self.end = end

# Теперь мы можем создать объекты этого класса
# first_range = MyRange(1, 10)
# Но, на данный момент этот класс не являкется iterable
# Если мы вызовем для него iter()
# iter(first_range)
# Получим ошибку: TypeError: 'MyRange' object is not iterable
# Что надо сделать, чтобы этот класс стал iterable?
# Для этого в этом классе нужно имплементировать метод iter

class MyRange():
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.current = start  # <- 2. Инициализируем его значением Start.
        # То есть, изначально, мы поместим первый элемент последовательности в переменную current -> 3

# Этот метод должен возврщать iterator

    def __iter__(self):
        # return 1  # - так не пойдет, получим TypeError: iter() returned non-iterator of type 'int'
        # так как тут мы возвращаем не итератор, а целое число, объект типа 'int'
        # но, если здесь мы вернем любой итератор, например, полученный из строки,
        # мы можем из любого iterable получить iterator (лист, тьюпл, словарь, сет)
        # return iter('hi')
        # Здесь никакой ошибки не получаем, так как мы возвращаем объект - стринговый итератор
        # все работает корректно, но, для нашего случая это не подходит, потому что нам нужно, чтобы
        # итерация происходила в диапазоне start - end. Поэтому сделаем по другому.
        # здесь мы будем возвращать параметр self, то есть сам вновь созданный объект
        return self
        # Но, сейчас этот объект еще не является итератором, и, чтобы он им стал,
        # надо имплементировать метод next()

    def __next__(self):
        # и здесь уже нам надо реализовывать логику - получить последовательнолсь от start до end
        # и последовательно возвращать эти элементы этой последовательности
        # поэтому введем еще один параметр self.current вконструкторе -> 2
        # -> 3
        # Далее будем проверять
        if self.current < self.end:
            # создаем переменную и присваиваем ей self.current
            number = self.current  # это первый элемент последовательности на данный момент
            self.current += 1
            return number  # -> 3/1
        # 4
        raise StopIteration
        #  и теперь мы получим эту последовательность



# -> 3/1
# Дальше попробуем использовать это в цикле
first_range = MyRange(20, 30)
for number in first_range:
    print(number)
# Получаем бесконечный цикл
# Для того, чтобы не было бесконечного цикла, в конце надо выбросить исключение -> 4

# Мы рассмотрели работу этих двух методов __iter__ и __next__ с целью понять, как можно их
# имплиментировать в свой класс, чтобы сделать класс iterable