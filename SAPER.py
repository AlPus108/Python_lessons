# САПЕР
# Рисуем поля для игры сапер
# На вход будет поступать размер поля и координаты с расположениями мин
# на выход программа будет выдавать само поле, где в каждой клетке будет указано, находится ли там мина,
# либо сколько мин находится в соседних, если они там есть.

# Ввод
# Число строк, число столбцов, число мин
# 5 4 4
# Координаты мин в формате № строки № столбца
# 1 1
# 2 2
# 3 3
# 4 4

# Вывод (будет нарисовано) Мина - *
# *21.
# 3*2.
# 2*31
# 112*

# Во всех остальных клетках по соседству с данной считаем количество мин. У одной клетки есть 8 соседей,
# если она не скраю.
# Если в соседних клетках количество мин > 0, ставим число(количество). Если мин нет, ставим точку '.'

# Строим двумерный список. Внешний список - строки, внутренний - столбцы
# Вначале эту матрицу заполняем нулями. В дальнейшем эту матрицу заполним значениями количества мин в соседних клетках
# Сначала читаем координаты мин из ввода и в таблицу вводим эти координаты со значением -1 (обозначает мину)
# Если мин нет, мы должны посчитать количество мин в соседних клетках и поставить это значение в ячейку

# Расчитываем размер таблицы и количество мин
stroki, stolb, miny = (int(i) for i in input().split())  # получаем входящие значения: строки, колонки, мины
# Инициализируем двумерный массив - генерируем n строк и в каждой строке генерируем m нулевых значений (столбцы)
a = [[0 for j in range(stolb)] for i in range(stroki)]
# Убедимся, что все сделали правильно. Вводим числа через пробел
# print(a) # может получиться и не квадрат, а строка. Но это не важно.

# Читаем координаты расположения мин и каждую мину поместим в таблицу, обозначив их как -1 в соответ позиции
for i in range(miny):  #
    row, col = (int(i) - 1 for i in input().split())  # номер строки, номер столбца
    # так как в нашей программе индексация элементов списка начинается с нуля, а номера позиций она выводит начиная с 1,
    # мы сразу в преобразованном числе вычитаем 1. Полученые индексы row и col начинаются с нуля.
    # После того, как мы получили позиции строчки и столбца, запишем туда -1
    a[row][col] = -1  # записываем в них значение -1
    # На этом чтение данных закончено
# Переходим к заполнению таблицы
# Мы хотим посчитать для каждой ячейки, сколько по соседству с ней находится мин (-1)
for i in range(stroki):
    for j in range(stolb):
    # это нужно делать только для тех ячеек, в которые уже записаны мины -1
        if a[i][j] == 0:  # если в ячейке записан 0, то есть нет мины
            for di in range(-1, 2):  # перебираем все клетки со смещение верх-вниз-влево-вправо по коорд i
                for dj in range(-1, 2):  # аналогично по координате j
                    ai = i + di  # подсчитаем координаты соседней клетки по строке, соответствующей данному смещению
                    # ai - номер строки i - смещение по строке
                    aj = j + dj  # аналогично для столбца, aj - номер столбца, aj - смещение по номеру столбца
                    # далее проверяем, что позиция (ai, aj) находится на поле, а не за границей поля.
                    # Если это так, то проверим, что в этой клетке находтися -1
                    if 0 <= ai < stroki and 0 <= aj < stolb < stolb and a[ai][aj] == -1:
                    # если ai и aj находятся в правильном интервале
                    # если это верно, клетки находятся внутри поля.
                    # Далее проверяем, что находится внутри поля, мы хотим увеличить значение в ячейке на 1
                    # в том случае, если в этой клетке стоит мина -1, в этом случае мы нашли мину в сосед клетке
                        a[i][j] +=1  # увеличиваем на 1
# На этом подсчет таблицы закончен. Осталось ее вывести
for i in range(stroki): # Для этого перебираем все строки таблицы
    for j in range(stolb): # и в строке перебираем все элементы
        if a[i][j] == -1:     # Смотрим, если в очередной ячейке стоит мина,
            print('*', end='')  # то выводим символ *, и указываем, что остаемся на данной строке
        elif a[i][j] == 0: # Дальше проверяем, что если в ячейке записан 0, то есть по соседству мин нет,
            print('.', end='') # ставим точку
        else:  # в противном случае в ячейке находится какое-то положительное число, которое означет,
            print(a[i][j], end='')   # сколько мин находится по соседству
# Когда мы целиком вывели всю строку, переходим на новую
    print()


