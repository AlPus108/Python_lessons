# СЛОВАРИ напоминают списки, но есть одно принцимпиальное различие: они состоят из ключей и значений.
# Ключ, это тот элемент, по котрому мы получаем значение

dictionaty_list = {'name' : 'Ariel'}  # сначала ключ, потом значение
# в качестве значения можно использовать объекты любого типа, в том числе списки и сами словари.
# В словаре доступ к значениям происходит по ключам, тогда как в списках - по индексам.
# Марка автомобиля - ключ, цена автомобиля - значение
# Все операции в словаре происходят очень быстро. Это эффективно реализованная конструкция.

# ---------------------- Способы инициализации словарей ----------------------
# 1 Способ
# Словари объявляются (инициализируются) фигурными скобками {}
# dict_temp = {}
# Заполняем словарь ключ-значение
dict_temp = {'dict1': 1, 'dict2': 2.1, 'dict3': 'name', 'dict4': [1,2,3]}
print(type(dict_temp), dict_temp)  # выводим тип словаря и сам словарь

# 2 Способ
# Также словарь можно инициализировать с помощью метода fromkeys()
dict_temp = dict.fromkeys(['a', 'b'])  # dict - указание класса
# Здесь создан словарь, где указаны ключи a и b с пустыми значениями.
print(type(dict_temp), dict_temp)  # получаем на выходе  <class 'dict'> {'a': None, 'b': None}
# для установки значений нужно подать еще один список
dict_temp = dict.fromkeys(['a', 'b'], [12, '2020'])  # dict - указание класса
print(type(dict_temp), dict_temp)  # получаем на выходе  <class 'dict'> {'a': [12, '2020'], 'b': [12, '2020']}

# 3 Способ
# Инициализация словаря с помощью генератора
dict_temp = {a: a**2 for a in range(10)}  # конструкция такая же, как и в списках.
# a - ключ, a**2 - значение, далее конструкция цикла
print('Инициализация с помощью генератора', type(dict_temp), dict_temp)
# получаем на выходе  <class 'dict'> {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

# 4 Способ (редко используется, так как все ключи-значения надо вносить вручную)
dict_temp = dict(brend = 'volvo', price = 5000)
print(type(dict_temp), dict_temp)  # получаем на выходе  <class 'dict'> {'brend': 'volvo', 'price': 5000}


# ----------------------- Обращение к содержимому словаря --------------------------

# Обращение к содержимому происходит по ключу.
print(dict_temp['brend'])  # выводим значение, указывая ключ

# ------------------ Функции со словарями ------------------------------

# Часто необходимо знать все ключи словаря и все значения
# Получим все ключи словаря
print(dict_temp.keys())  # Возвращается специальный тип dict_keys
# на выходе имеем dict_keys(['brend', 'price'])
# Но, как правило, с этим типом не работают. Его приводят к листу:
print(list(dict_temp.keys()))  # на выходе получаем ['brend', 'price']
# И дальше, все операции, которые необходимо проверсти с ключами, делают с типом list

# Значения получают через ф-ю value
print(list(dict_temp.values()))  # на выходе имеем ['volvo', 5000]
# В таком формате вывода,при работе с коючами и со значениями можно использовать все методы, которые имеются в листах.

# Также можно работать с парами ключ-значение. Для этого нужно использовать метод items()
# items() возвращает лист из картежей - пара ключ-значение (Картеж, это тот же самый лист, только неизменяемый)
print(list(dict_temp.items()))  # на выходе имеем [('brend', 'volvo'), ('price', 5000)]

# ------------------------ Работа с элементами ---------------------------------

# Нам необходимо получать значения, изменять их (потому что словарь, это изменяемый тип) и добавлять новые

# Переинициализируем переменную для рассмотрения следующих задач
dict_temp = {a: a for a in range(10)}
print('Переинициализация', dict_temp)  # На выходе: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}

# МЕНЯЕМ значение.
# Какому-то ключу присвоим другое значение
dict_temp[0] = 100
print(dict_temp)  # на выходе имеем {0: 100, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}
#  Нулевому ключу теперь соответствует значение 100

# ДОБАВЛЯЕМ пары ключ-значение
dict_temp['name'] = 'Alex'  # Создаем новый ключ и присваиваем ему значение.
print(dict_temp)  # Вывод на экран: {0: 100, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 'name': 'Alex'}


# ----------------------- мЕТОДЫ СЛОВАРЕЙ ---------------------------------
# У словарей большое количество методов. Какие-то мы уже рассмотрели, это keys(), values(), items()
# C помощью методов словарь можно очищать, копировать, удалять значение по ключу

# Удаление значения по ключи произвоидстя с помощью ф-и pop()
temp = dict_temp.pop('name')  # удаляем ключ 'name', в месте с ним удаляется и его значение 'Alex'
# При этом он возвращает удаленное ключ-значение через новую пересенную
print(dict_temp)  # Вывод на экран: {0: 100, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}
print(temp)  # Вывод на экран: Alex
# Если такого ключа нет, будет возвращено default без выбрасывания каких-то исключений

# --------------------- Итерирование по словарю ------------------------------------

# Итерация по Словарям происходит также, как и по Спискам

for pair in dict_temp.items():
    print(pair)

# На выходе получаем список пар ключ-значение:
# (0, 100)
# (1, 1)
# (2, 2)
# (3, 3)
# (4, 4)
# (5, 5)
# (6, 6)
# (7, 7)
# (8, 8)
# (9, 9)

# Также можно итерироваться, работая с комплектными элементами

for key, value in dict_temp.items():  # key - первое значение в паре, value - второе значение в паре
    print(key, value)

# На выходе:
# 0 100
# 1 1
# 2 2
# 3 3
# 4 4
# 5 5
# 6 6
# 7 7
# 8 8
# 9 9

# Можно тем же способом итерироваться по отдельным элементам конструкции
# По ключам:

for key in dict_temp.keys():
    print(key)

# По значениям:

for value in dict_temp.values():
    print(value)


# Операции со значениями
for value in dict_temp.values():
    print(value + 10, end=' ')  # 110 11 12 13 14 15 16 17 18 19
