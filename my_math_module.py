# В связке с:
# 1 my_muth_module.py
# 2 main.py

# Здесь мы создадим свой небольшой модуль с арифметическими операциями из ф-й вычисления чисел Фибоначчи.
# И в дальнейшем научимся инициализировать из него эти модули и ф-и.

# Ф-и арифметических операций
def my_add(x,y):
    return x + y

def my_sub(x,y):
    return x - y

def my_mult(x,y):
    return  x * y

def my_div(x,y):
    return x / y

# ф-я вычисления чисел Фибоначчи
# Это числа, которые подчиняются следующему правилу: f_n = f_{n-1} + f_{n-2}
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# Код напишем с помощью рекурсивных ф-й (ф-и, которые вызывают сами себя).
def fib_num(n):
    if n == 1: return 1
    elif n == 2: return 1
    else: return fib_num(n-1) + fib_num(n-2)

# print(fib_num(7))

# Эту же ф-ю можно переписать с применение Лямбды

fib_num_l = lambda n: fib_num_l(n-1) + fib_num_l(n-2) if n > 2 else 1

# print(fib_num_l(7))

# Создадим еще одну дирректорию main.py и импорируем туда этот модуль my_math_module.py  1--> переходим в main.py

# 4--> Вернулись из вкладки main
# Чтобы код в этом файле исполнялся только тогда, когда мы вызваем его на исполнение, а не просто импортируем,
# пишем код

if __name__ == '__main__':  # Если вызов из модуля main, тогда исполняется нижний код 5 --> my_math_module

    # 2--> пришли из вкладки main
    # Сейчас напишем в этом модуле что-то для исполнения.
    # Напишем проверочный код.
    n = 10
    if (fib_num_l(n)**2 + fib_num_l(n+1)**2) == fib_num_l(2*n+1):
        print('Проверка прошла успешно')
    else:
        print('Тест не пройден')

# Запускае модуль my_math_module
# Проверка прошла успешно
# Для чего это?
# Когда мы вызываем какой-то модуль, то исполняется весь написанный в нем код.
# Поэтому то, что мы здесь написали, выполнится при импорте этого модуля в других вкладках.
# Именно при вызове модуля. 3--> в main

# 5--> Проверяем. Исполняем этот модуль
# Проверка прошла успешно
# Если мы распечатаем значение переменной __name__
print(__name__)
# Она будет иметь значение __main__  6--> main


