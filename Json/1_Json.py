# JSON

# Это текстовый формат обмена данными. Пришел из JavaScript
# Это еще и стандарт для передачи информации. Потому что протокол Http (базовый протокол для соединения
# веб-приложений) передает строки (текстовый формат данных). А Json - это строка с очень удобно упакованной
# информацией. В связи с этим Json сейчас практически является стандартом
# Выглядит он очень похоже на обычный Словарь.
# Слева - Ключи, справа - Значения. Но, Ключи являются также строками. В Питоне ключами могут быть любые элементы.

Q = [
        {
            'discription': 'quarter',
            'mode': 'REQUIRED',
            'name': 'qtr',
            'type': 'STRING'
        },
        {
            'discription': 'sales representative',
            'mode': 'NULLABLE',
            'name': 'rep',
            'type': 'STRING'
        },
        {
            'discription': 'total sales',
            'mode': 'NULLABLE',
            'name': 'sales',
            'type': 'INTEGER'
        }
]

# Как использовать формат Json и какая для этого есть библиотека.
# Пакет, обрабатывающий json-файлы называется также json
import json

# Создадим объект json. Сделаем это из dict
# Создаем dict

dict_ex = {'brand': 'Volvo', 'Price': 1.5, 'Vol': 2.0}

# --------------------- Методы dump(), dumps() --------------------------------------

# Метод, который приводит к типу json, называется dump

dict_to_json = json.dumps(dict_ex)  # приводим файл типа dict к типу json
print(type(dict_to_json), dict_to_json)
# <class 'str'>  - теперь тип объекта 'string', который имеет json
# {"brand": "Volvo", "Price": 1.5, "Vol": 2.0}
# Хотя по виду это dict, но на смом деле это string. Это значит, что мы не можем обращаться к нему ни по ключу,
# ни по значению, то есть не можем использовать ф-и dict.
# Это называется 'Сериализация' - перевод данных в фармат, который удобен для всех.
# С помощью ф-и dumps класса json мы сериализовали объект dict в формат json (в объект json).
# Теперь мы можем производить с ним разные действия.
# Например, записать в файл

with open('dict_to_json.txt', 'w') as f:  # создаем файл на запись 'w'
    # чтобы записать информацию в файл, нам надо воспользоваться методом dump() модуля json
    json.dump(dict_ex, f)  # передаем в метод файл dict_ex, который там сериализуется, второй параметр - переменная,
    # c которой связали создаваемый файл.
    # И дальше файл закрывается с помощью менеджера контекса with

# То есть есть два способа сериализации.
# Если мы хотим работать в рамках одного проекта и нам необходимо сохранить каку-то переменную в строку,
# мы можем передать/пропустить эту переменную напрямую через dumps()
# Если же мы хотим передать куда-то файл json, необходимо использовать метод dump(), который запишет данные в файл.

# Выполняем код
# В каталоге появляется файл dict_to_json.txt строкового типа
# {"brand": "Volvo", "Price": 1.5, "Vol": 2.0}

# Допустим, мы создали этот файл и передали его.
# Посмотрим, что происходит на принимающей стороне.
# Там читают этот файл и создают из него словарь для дальнейшей обработки.


# ---------------------------- Методы load(), loads()---------------------------------------

# Для обратной конвертации файлов используют методы load() и loads()
# Точно также, в менеджере констекста открываем файл, только уже не на запись, а на чтение.

with open('dict_to_json.txt', 'r') as f:  # открываем файл на чтение 'r'
    data = json.load(f)  # записываем в переменную то, что вернет ф-я load() и указываем только переменную.
print(type(data), data)
# <class 'dict'> - это уже файл класса dict
# {'brand': 'Volvo', 'Price': 1.5, 'Vol': 2.0}

data_1 = json.loads(dict_to_json)
print(type(data_1), data_1)
# <class 'dict'> - это также файл класса dict
# {"brand": "Volvo", "Price": 1.5, "Vol": 2.0}


# --------------------- Реальные примеры работы с данными json --------------------------

# Ответ по API
# API - aplication interface
# Мы делаем запрос на какой-то удаленный сервис и он нам выдает какой-то ответ.
# Это все выполняется с помощью библиотеки requests

import requests

# из библиотеки requests мы делаем запрос get к интернет-порталу. Он выдает какую-то рандомную дату.
response = requests.get("https://jsonplaceholder.typicode.com/todos")  # ответ передается в переменную response
# Сериализуем ответ с помощью команды json.loads
data_2 = json.loads(response.text)
# Выводим ответ
print(data_2)
# В ответе получаем json-чики в виде списков
# [{'userId': 1, 'id': 1, 'title': 'delectus aut autem', 'completed': False},
# {'userId': 1, 'id': 2, 'title': 'quis ut nam facilis et officia qui', 'completed': False},
# {'userId': 1, 'id': 3, 'title': 'fugiat veniam minus', 'completed': False}, .........................
# .............................{'userId': 10, 'id': 200, 'title': 'ipsam aperiam voluptates qui', 'completed': False}]

# Json-ом нужно уметь пользоваться, выполнять сериализацию - десириализацию

# --------------- Сериализация и Десериализация объектов Python в формате Pickle

