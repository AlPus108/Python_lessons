# Генераторы последовательностей


# Запись общей конструкции, которой подчиняются все генераторы последовательностей

# [x for x in range(0, n+1) if x%2==0]

# Логика следующая:
# х пробегает все значения по какому-то списку, но в список добавляются только те элементы последовательности,
# которые удовлетворяют условию.
# То есть, перед нами генератор списка, который создаст последовательность из тех элементов списка,
# которые удовлетворяют условию
# Все то же самое касается и словарей и множеств. Общая конструкция не меняется, а добавляется только специфика
# каждого типа данных.

# В Питоне есть отдельное название для этого способа генерации Списков, Словарей, Множество.
# И это называется Генераторы

# Давайте убедимся на примере, что данный способ записи гараздо более экономичный.

# Но перед этим разберем понятие 'Тернарный оператор'
# Это способ записи выражения присваивания в одну строку.

# Создадим ф-ю проверки возраста, которая будет проверять возраст на совершеннолетие.

def check_adult(age_person):
    check = 0
    if age_person >= 18:
        check = 1
    else:
        check = 0
    return check


age = 18

print(check_adult(age))  # 1

# Эту же ф-ю запишем через Лямбда-функция + тернарный оператор

check_adult_1 = lambda x: 1 if age >= 18 else 0
print(check_adult_1(age))

# Теперь это выражение перепишем с помощью тернарного оператора

check = 1 if age >= 18 else 0
print(check)

# Далее Генераторы последовательностей

# -------------------- для Списка ----------------------

# Рассмотрим два сопсоба

# Сгенерируем список из квадратов чисел
# Для начала создаем пустой список
list_sq_1 = []
N = 10  # параметр N задает количество необходимых квадратов

for i in range(1 , N+1):
    list_sq_1.append(i**2)  # каждый элемент списка возводим в квадрат
print(list_sq_1)
# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# Чтобы иметь последние цифры чисел генерируемой последовательности
list_sq_2 = []

for i in range(1 , N+1):
    list_sq_2.append((i**2)%10)  # каждый элемент списка возводим в квадрат и делим на 10 - получаем последнее число
print(list_sq_2)
# [1, 4, 9, 6, 5, 6, 9, 4, 1, 0]

# Теперь то же самое сделаем с помощью генераторов списков

list_sq_g = [(i**2)%10 for i in range(1 , N+1)]
print(list_sq_g)
# [1, 4, 9, 6, 5, 6, 9, 4, 1, 0]

# Но, в этом варианте записи громозкость кода возникает если еще добавляются условия if
list_sq_3 = []
for i in range(1 , N+1):
    if (i**2)%2 == 0:  # если значение четное
     list_sq_3.append(i**2)  # добавляем в список
print(list_sq_3)
# [4, 16, 36, 64, 100]  # получаем только четные значения

# То же выражение в Генераторе списков
list_sq_g = [i**2 for i in range(1 , N+1) if (i**2)%2 == 0]
print(list_sq_g)
# [4, 16, 36, 64, 100]

# Это Питоновсий стиль, что делает вычисление гораздо быстрее и выглядит намного лучше.

# -------------------- для Словаря ----------------------

# Единственное отличие от Списков - здесь используется Ключ-Значение
dict_g = {i: i**2 for i in range(1 , N+1)}  # Ключ-Значение i: i^2
print(dict_g)
# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}


# -------------------- для Множества ----------------------

# Записывается также, как и Словарь, но только без ключей
set_g = {i**2 for i in range(1 , N+1)}
print(set_g)  # {64, 1, 4, 36, 100, 9, 16, 49, 81, 25}  # квадраты чисел последовательности

set_g_d = {(i**2)%10 for i in range(1 , N+1)}  # здесь выводим остатки от деления
print(set_g_d)  # {0, 1, 4, 5, 6, 9}

# Рещим задачу
# У нас есть список имен. Мы должны получить список из первых букв, но в верхнем регистре

list_names = ['Dima', 'kate', 'oleg', 'Nastya']

# Далее создаем новый спсок с помощью генератора списка из первых букв в верхнем регистре
# Здесь мы используем тернарный оператор и генератор списка

list_char = [x[0] if x[0].isupper() else x[0].title() for x in list_names]
# Расшифровка выражения
# х - имя
# Если первая буква х[0] текущего имени большая .isupper(), добавляем ее в список
# Иначе возводим ее в верхний регистр  x[0].title()
# в цикле для каждого имени переданного списка
print(list_char)
# ['D', 'K', 'O', 'N']  # получаем первые буквы имен в верхнем регистре