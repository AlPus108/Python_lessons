# List_Comprehension
# Переводится, как "Понимание списков"
# Это концепция о том, как можно создавать списки из различных последовательностей при помощи более элегантной
# и короткой формы записи

# # Если стоит задача создать список из какой-то последовательности, это можно сделать при помощи цикла.
greeting = 'Hello!'  # Нам надо создать список их этой строки.
# # Для начала нам надо создать пустой список
# letter_list = []
# # И теперь в цикле мы можем добавлять элементы в этот список при помощи метода append()
# # Работу этого метода рассматривали при изучении Списков
# for letter in greeting:  # Для каждой буквы из строки greeting мы будем делать следующее:
#     letter_list.append(letter)  # добавляем буквы в letter_list
# print(letter_list)
# # Вывод: ['H', 'e', 'l', 'l', 'o', '!']  # Получаем список, состоящий из символов исходной строки.

# # Все это можно сделать при помощи более короткой формы записи.
# # Также создаем переменную, но не пустую, а сразу ее инициализируем
# letter_list = [let for let in greeting]  # Читается как: для каждой буквы let из строки greeting
# # помещаем букву let в этот список
# print(letter_list)
# # # Вывод: ['H', 'e', 'l', 'l', 'o', '!']  # Получаем такой же список
#
# # Не обязательно сюда помещать переменную greeting.
# # Вместо greeting мы можем поместить саму строку или любую другую последовательность.
# number_list = [num for num in '0123456789']
# print(number_list)
# # Получаем список из символов строки, которые являются числами
# # ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
#
# # Но, если мы хотим получить именно числа, то лучше это сделать при помощи получения последовательности из ф-и range()
# number_list_1 = [num  for num in range(0, 10)]  # Если хотим получить строку из цифр от 0 до 10,
# # можно указать просто 10, а можно указать диапазон 0,10
# print(number_list_1)
# # Вывод: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] - в этом случае получаем числа.
#
# # Мы можем производить какие-то действия над элементами из этой последовательности перед тем, как поместить
# # этот элемент в список. Например, возмести каждый элемент в квадрат и затем поместить в список
# number_list_2 = [num ** 2  for num in range(0, 10)]
# print(number_list_2)
# # Вывод: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
#
# # Можем производить и более сложные действия над элементами. Например,
# number_list_3 = [- ((num - 3) / 2) ** 2  for num in range(0, 10)]
# print(number_list_3)
# # Вывод: [-2.25, -1.0, -0.25, -0.0, -0.25, -1.0, -2.25, -4.0, -6.25, -9.0]

# В этой форме записи также можно использовать оператор if. То есть, отбирать элементы по какому-то условию.
number_list = [6, 43, -2, 11, -55, -12, 3, 345]  # Нам надо выбрать только положительные значения из этого списка
new_list = [number for number in number_list if number > 0]
# Помещаем элемент в новый список только в том случае, если он положительный.
print(new_list)
# [6, 43, 11, 3, 345] - получаем список из положительных элементов

# Также можем производить какие-то действия над элементом перед помещение его в список
new_list_1 = [number ** 3 / 2 for number in number_list if number > 0] # возводим его в степень 3 и делим на 2
print(new_list_1)
# Вывод: [108.0, 39753.5, 665.5, 13.5, 20531812.5]

# Также, мы можем использовать оператор else, но он немного усложняет эту форму записи
# Допустим мы хотим в результате вывести строку из '+' и '-'. Если число положительное - помещаем плюс,
# если отрицательное - '-'
# Эту форму записи можно записывать начиная с цикла, чтобы было более понятно
# new_list_2 = [for number in number_list] - потом эту строку развиваем далее
# перед этим выражением указываем то, что будем помещать в наш списток. В данном случае не само число, а его знак.
new_list_2 = ['+' if number < 0 else '-' for number in number_list]
# То есть, условный оператор if-else мы переносим вперед в отличии от предыдущего варианта, когда if был в конце
print(new_list_2)
# Вывод: ['-', '-', '+', '-', '+', '+', '-', '-']

# Также, мы можем использовать такую форму записи и для других последовательностей.