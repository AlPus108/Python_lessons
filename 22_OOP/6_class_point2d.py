# Классы в Python

# Класс, это некая общая схема объектов, подобная чертежу.
# Конкретный объект, это реализация этих классов

# Реализуем класс "Точка на плоскости"


class Point2D:  # здесь могут быть некоторые аргументы (классы наследования и тд.)

    # Метод инициализации класса
    def __init__(self, x,y):  # инициализирующий метод; должне быть у всех классов; self - это сам объект
        # дальше обращаемся к атрибутам класса через self
        self.x = x  # поля читаются и записываются через self
        self.y = y  # self указывает на текущий экземпляр класса

    # Метод вывода класса
    def __str__(self):
        return f'Точка: ({self.x}, {self.y})'

    # Метод класса
    # возвращает расстояние до центар координат
    def distance(self):  # self говорит, что метод принадлежит этому классу
        return (self.x**2 + self.y**2)**0.5  # корень из сумм координат в квадрате

    # Еще более сложная ф-я класса.
    # Определяет расстояние до другой точки
    def point_distance(self, a, b):  # передаем координаты другой точки
        return ((self.x-a)**2 + (self.y-b)**2)**0.5  # корень из сумм координат в квадрате

    # Кроме стандартных методов __init__  и __str__ есть еще ряд стандартных методов для перегрузки всех операций
    # Перегрузка означает, что мы при помощи обычного плюса '+' сможем складывать (конкатенировать) наши объекты
    # также, как мы это делаем со строками.
    # Точки будут складываться как вектора. Это будет выполняться с помощью обычного плюса,
    # поэтому мы плюс перегружаем множеством операций

    # Перегрузка '+'
    # Для этого существует специальный метод __add__
    def __add__(self, other):  # здесь передается сам объект (self) и принимается какой-то другой объект (other)
        # здесь не будем делать проверку типов, хотя она необходима, напишем пока просто
        return Point2D(self.x + other.x, self.y + other.y)

    # Также, можно перегружать и все осталные математические операции: вычитание, разность, произведение и тд




if __name__ == "__main__":  # проверяем: если это исполняющий модуль
    # создаем объект (экземпляр класса)
    p = Point2D(2,3)
    print(p)  # <__main__.Point2D object at 0x007FE550>  - сылка на созданный объект в памяти компьютера
    print(type(p))  # <class '__main__.Point2D'>  - объект принадлежит классу Point2D


# Воспользуемся методом класса для объекта
print(p.x, p.y)  # обращаемся к атрибутам через точку
print(p)  # вывод через метод вывода, созданный в классе
print(p.distance())
print(p.point_distance(2,3))  # 0.0
print(p.point_distance(3,4))  # 1.4142135623730951

# Используем методо перегрузки плюса
# Определяем вторую точку
q = Point2D(3, -2)

# Выводим результат сложения
print(p + q)  # Точка: (5, 1)

