# ИСКЛЮЧЕНИЯ

# Исключение - это реалкция программы на ее некорректную работу.
# Исключение, это некоторый тип данных, который выкидываетсы в трэйс-бэк с информацией об ошибке.
# В Пайтоне введена иерархия исключений. Есть исключения крупные, т.е. менее информативные,
# и есть более детальные, которые содержат конкретную информаци. об ошибке.
# Исключения необходимо обрабатывать. И это делается с помощью следующих методов:

# 1 Метод try()
try:  # выполняет код внутри своего тела и натыкаемся на исключение
    k = 1 / 0  # если возникает какое-то исключение, мы должны знать название исключения, которое возникло
except ArithmeticError:  # названия можно указывать в самом общем виде.
    # Чем выше название, тем менее точно мы можем сказать, что произошло
    # В данном случае указываем, что это ArithmeticError - арефметическая ошибка.
    k = 0  # при получении
    # дальше менее используемые ветви прогарммы else и finally
else:  # выполняется в том случае, если не было исключений
    print('All right')
finally:  # выполняется всегда, не зависимо от сценария работы программы.
    print('Division complete!')

# Сценарий
# try:
#   исполняем какой-то код
# except Exception as e:  - в переменной 'e' будет находится информация об этом исключении
#   обработка исключения. Здесь мы можем испльзвоать описание ошибки из пересенной 'e'
#   Выводим какую-то информацию, сохраняем какой-то логи или что-то другое
# else:
#   Код, который будет выплнен в том случае, если не возникает исключения
# finally:
#   Код, который выполняется всегда.

# Пример кода

# a = int(input('Введите первое число: '))
# b = int(input('Введите второе число: '))
#
# print(a / b)

# Сознательно поделим на 0
# Получим исключение: ZeroDivisionError: division by zero

# Обработаем это исключение с помощью метода try - except
try:
    a = int(input('Введите первое число: '))
    b = int(input('Введите второе число: '))

    print(a / b)
except ZeroDivisionError as e:
    print('Так больше не делай: ', e)
# Получаем вывод исключения: division by zero
else:
    print('Все хорошо!')
finally:
    print('Это было что-то!')

# Рассмотрим еще один скрип со считыванием данных из файла.
# У нас есть файл data. В нем находятся числа.
# Открываем файл

# f = open('data')
# # Там находятся числа. Поэтому мы создадим лист и туда считаем эти числа
# int_arr_list = []
# for line in f:
#     int_arr_list.append(int(line))  # приводим к int, так как в файле числа
# print(int_arr_list)  # [123, 1234, 12345]

# Но, если в файл добавим не цифру, то получим исключение:
# ValueError: invalid literal for int() with base 10: 'dsfsd\n'

# ОБработаем эту ошибку с помощью try - except

f = open('data')
int_arr_list = []
try:
    for line in f:
        int_arr_list.append(int(line))
    print(int_arr_list)  # [123, 1234, 12345]
except ValueError:
    print('У вас там кроме чисел еще что-то непонятное!')
else:
    print('Все прошло хорошо!')
finally: f.close()  # если файл открыли, то обязательно в конце работы с ним его надо закрыть!

print(int_arr_list)

# Таким образом можно писать свои искючения. Это бывает полезно, когда при работе программы надо получить
# какую-то информацию. Вы прописываете искоючение, пишите в нем какое-то сообщение, которое выходит при
# получении какого-то события.

