# Работа с CSV-файлами
# Название произошло от comma-separated values (CSV)
# comma - запятая, separated - разделенные, values - значения. Значения разделенные запятыми.
# Если визуализировать, то это таблица Эксель, которая имеет текстовый формат.
# Это текстовые файлы, которые используют запятые для разделения значений. Все CSV-файлы хранят табличные данные,
# числа, текст в формате простого текста. Каждая строка текста, это запись данных,
# и каждая строка содержит одно или более полей, разделенных запятыми. Использование запятых, как источника полей
# и послужило источником названия этого формата файлов. Эти файлы имеют расширение .csv
# Формат CSV-файлов не полностью стандартизирован. Что это значит? Основная идея резделения полей запятынми понятна.
# Эта идея становится более сложной, когда поля данных также имеют запятые. Например, разделители дробной части числа.
# Так же вносят некоторую сложность знаки вовычек, которые окружают поле и т.д.
# Так же термин CSV используется для обозначения близко относящихся фарматов, которые также разделяются какими-то
# символами, но они используют другие разделители полей, например точку с запятой. Эти файлы также часто используют
# CSV-расширения, хотя используют для разделения не запятые, а какие-то другие разделители. Эта свободная терминология
# может быть причиной проблем при обмене данными. Многие приложения, которые принимают CSV-файлы, имеют опцию для
# выбора символа разделителя и также для выбора символа кавычек. Точка с запятой часто используется вместо запятых
# в европейских странах.
# Тем не менее, CSV-формат очень популярен в силу своей простоты и часто данные хранятся и передаются именно в нем.
# Итак, CSV-файлы описывают табличные данные. Это таблица с заголовками.
# Если мы откроем CSV-файл не в Экселе, а в обычном txt-редкаторе, то увидим,
# что первая строка CSV-файла содержит данные заголовков столбцов таблицы.
# Остальные строки содержат данные полей таблицы. Все это разделено запятыми или другими знаками для разделения данных.

# Пример
# Год,Производитель,Модель,Длина
# 1997,Форд,Е350,2.34              - в качестве десятичного разделителя используется точка '.'
# 2000,Меркурий,Coguar,2.38

# Аналог европейского CSV-файла
# Год;Производитель;Модель';Длина
# 1997;Форд;Е350;2,34              - в качестве десятичного разделителя используется запятая ','
# 2000;Меркурий;Coguar;2,38

# Создаем файл -> cars.csv

# Запускаем файл
with open('cars.csv') as file:
    f = file.read()
    print(f)
# Year,Make,Model,Description,Price
# 1997,Ford,E350,"ac, abs, moon",3000.00
# 1999,Chevy,"Venture ""Extended Edition""","",4900.00
# 1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000.00
# 1996,Feep,Grand Cherokee,"MUST SELL! air, moon roof, loaded",4799.00

# И уже мы можем эти данные каким-то образом парсить, распознавать, то есть писать какой-то код, с помощью которого
# мы можем эти данные извелкать построчно, помещать их в списки и далее пользоваться.
# Но, это довольно сложно.
# К счастью, в Пайтоне есть специальные способы для работы с CSV-файлами. Они намного проще, чем самим придумывать,
# как парсить этот текст.

# Для работы с CSV-файлами используеются две библиотеки:
# csv  - позволяет читать, записыват файлы csv и есть простейшая обработка.
# Pandas - библиотека для тех, кто занимается анализом данных. Он также может считывать данные из csv-файлов
# в свой объект, называемй dataframe. Pandas предоставляет огромный арсенал иснструментов для работы с файлами.

# Работа с библиотекой csv - файлы:
# 2_csv_reader.py
# 3_csv_writer.py

# Работа с библиотекой Pandas файл:
# 4_pandas_csv.py
