# ВСТРОЕННЫЕ ФУНКЦИИ, которые наиболее часто используются

# ------------------------------ range() - диапазон -------------------------------
# Испльзуется, когда нужно выоплнить какое-то действие несколько раз
# for i in range(10):  # указываем число - количество повторов
#     print(i)
#
# for i in range(3,10):  # указываем начало и конец диапазона. Если хотим включить в диапазон 10, выставляем 11
#     print(i)
#
# for i in range(1, 11, 2):  # добавляем шаг(третья цифра), с которым будет сгенерирована эта последовательность
#     print(i)

# Если мы распечатаем сам range(), получим объект типа range()
print(range(5))   # Вывод: range(0, 5)
# Если мы хотим получить последовательность (список), мы должны привести его к типу list
print(list(range(5)))  # Вывод: [0, 1, 2, 3, 4]


# ------------------------------------- enumerate() --------------------------------------
# Возвращает пары индекс - объект в типе Таплр

# Иногда возникает необходимость распечатать все индексы какой-то последовательности
# Имеем строку
# my_string = 'knwehnvslcj'
# Нам надо получить индекс каждого из этих символов
# Традиционный метод:
# В начале создаем вспомогательную переменную и инициализируем ее нулем
# letter_index = 0
# my_string = 'knwehnvslcj'
# for i in my_string:
#     print(i + ' - индекс объекта ' + str(letter_index))
#     letter_index += 1
# Вывод:
# k - индекс объекта 0
# n - индекс объекта 1
# w - индекс объекта 2
# e - индекс объекта 3
# h - индекс объекта 4
# n - индекс объекта 5
# v - индекс объекта 6
# s - индекс объекта 7
# l - индекс объекта 8
# c - индекс объекта 9
# j - индекс объекта 10

# Но, это же мы можем сделать по другому, более коротким путем.
# При этом нам уже не нужна вспомогательная переменная.

# Такой вариант кода намного корече и понятнее. Нам не надо создавать вспомог.переменную и постоянно ее приращивать.
# my_string = 'knwehnvslcj'
# for item in enumerate(my_string):
#     print(item)
# Вывод:
# (0, 'k')
# (1, 'n')
# (2, 'w')
# (3, 'e')
# (4, 'h')
# (5, 'n')
# (6, 'v')
# (7, 's')
# (8, 'l')
# (9, 'c')
# (10, 'j')
# Получаем объеты типа Тапл, где индекс связан с каждым элементом этой строки
# Но, если нам Тапл не нужен, мы тут же можем их распакавать

# my_string = 'knwehnvslcj'
# for index, letter in enumerate(my_string):  # Первое значение распаковываем в index, второе в letter
#     print(str(index) + ' - индекс объекта ' + letter)  # и далее можем распечатать либо index либо letter,
    # либо и то и другое
# 0 - индекс объекта k
# 1 - индекс объекта n
# 2 - индекс объекта w
# 3 - индекс объекта e
# 4 - индекс объекта h
# 5 - индекс объекта n
# 6 - индекс объекта v
# 7 - индекс объекта s
# 8 - индекс объекта l
# 9 - индекс объекта c
# 10 - индекс объекта j


# --------------------------- Ключевое слово in ----------------------
# C помощью этого ключевого слова можно проверять, находится ли значение в какой-то последовательности

# print('a' in 'Jack')  # код спрашивает: находится ли 'a' в строке 'Jack'?
# # Вывод: True
# print('t' in 'Jack')
# # Вывод: False
# # Если в последовательности ищем число, надо сначало его привести к типу str
# print(str(1) in 'Jack')
# print('1' in 'Jack')  # Либо указать его в кавычках

# При помощи in мы можем проводить поиск не только в строках, но и в списках
# letter_list = ['a', 'b', 'c', 1, True]
# print('a' in letter_list)
# print(1 in letter_list)  # Здесь уже можем прямо указывать число без приведения его к типу.
# Так как в Списке это уже расценивается как элемент списка, а не как символ в строке!
# Здесь можно явно указывать любой объект любого типа и он будет проверен на наличие в Листе.

# Ключевое слово in также можно использовать и в Словаре
# В Словарях в качестве Ключей мы можем использовать и числа
# dict_1 = {1: 'a', 2: 'b', 3: 'c'}
# print(1 in dict_1)
# # По умолчанию, при обращении к Словарю мы получаем Ключи
# # Но, можно это указать и явно и получим то же самое
# print(1 in dict_1.keys())
# # Также можем получить доступ к Значениям Словаря
# print('c' in dict_1.values())


# --------------------------- min() max() --------------------------------
# Возвращают минимумы и максимумы последовательностей
# print(min(1, 3, 8, 16))
# print(max(1, 3, 8, 16))
#
# # Эти ф-и также можно использовать в качестве аргументов
# my_list = [1, 3, 8, 16]
# print(min(my_list))
#
# # Также мы можем найти минимальный символ по ASCI-коду в строке
# print(min('Hello'))  # Вывод: 'H' - имеет самый минимальный ASCI-код из этих букв
#
# # Можно вообще вывести ASCI-кода всех букв последовательности
# for letter in 'Hello':
#     print(ord(letter))  # Чтобы узнать ASCI-код, нужно использовать ф-ю ord()
# Вывод:
# 72
# 101
# 108
# 108
# 111
# Символ 'o' с самым большим кодом ASCI


# --------------------- Встроенные функции из библиотек Python ----------------------
# Для того, чтобы получить доступ к функциям библиотеки, нам нужно сначала испортировать библиотеку

from random import shuffle
# Импортируем ф-ю shuffle, что значит "перемешать"

my_list = [1, 3, 8, 16]
shuffle(my_list)
print(my_list)
# Вывод:  [1, 16, 8, 3] - получаем наш список переменанный в случайном порядке

from random import randint
# Импортируем ф-ю randint, которая выдает случайное целое число
print(randint(1,10))  # В скобках задаем диапазон, в пределах которого функция выдаст случайное число
