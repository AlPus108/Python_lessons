# ОБЪЕКТНО-ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ

# Концепция ООП - это описание с помощью языка программирование объектов окружающего мира, либо какого-то процесса,
# который существует в окружающей нас действительности: пользователь, приложение, дом, машина, расписание занятий,
# какой-то банковский счет можно описать при помощи этой концепции.
# Для описания объектов при помощи яззыка программирования, испльзуются такие понятия, как классы и объекты.
# Класс подобен чертежу объкта или рецепту изготовления какого-то блюда, либо спецификация, по которой изготавливаются
# все объекты этого класса. Внутри класса описываются отребуты и методы, которые затем содержаться в каждом объекте
# этого класса. Каждый автомобиль имеет какое-то количество колес, цвет, год выпуска, кол-во дверей.
# Все эти свойства автомобиля можно описать в атрибутах класса.
# Каждый автомобиль имеет способность к передвижению, возможность сигналить. Все эти и другие дейсвтия,
# которые может совершать объкт класса, описываются в методах класса.
# И далее каждый объект класса имеет все эти свойства уже со своими персональными значениями.
# Методы, это те же функции. То есть, в каждом классе создаются какие-то функции, которые затем могут использовать
# объекты этого класса. Эти функции класса называются методами класса.
# В Пайтоне также есть и втроенные классы. Но, если мы хотим описать какой-то сторонний объект, то мы должны создать
# свой собственный класс с атрибутами и методами, которые нужны нм для реализации кокой-то функциональночсти
# объектов этого класса.

# Если ввести help(list), мы получим всю документацию по классу list
# Класс list, это встроенный класс со своими методами
help(list)
# Методы этого класса можно использовать для объектов данного класса.
# Когда мы созадем список
my_list = [1, 2, 3]
# в данном случае мы создаем объект класса list, который содежит в себе конкретные значения, и ссылку на эти значения
# мы передаем переменной my_list
# И далее, мы можем вызывать любой из методов, перечисленные в спецификации к этому классу, для объектов этого класса.
my_list.append(4)
# В Питоне есть большое количество встроеных классов, которые содержат различные атрибуты и методы.
# Но, если нам не хватает их функционала, мы можем создать собственный класс.
# Класс начинается с ключевого слова class и название класса всегда мишется с ЗаглавнойБуквы

class MyFirstClass:
    # Сохраняется отступ
    # Записываем какие-то атрибуты и методы
    pass


# Создаем объект класса
object_of_my_class = MyFirstClass()  # создаем переменную класса (назвать можно как угодно)
# Смотрим тип переменной
print(type(object_of_my_class))
# <class '__main__.MyFirstClass'>
# Это переменная созданного нами класса


