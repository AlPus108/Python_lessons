# МОДУЛИ И ПАКЕТЫ

# Модуль в Питоне - это файл с расширением .ру с кодом
# Пакет в Питоне - это каталог, включающий в себя другие каталоги и модули, но при этом дополнительно содержащий
# файл __init__.py

# В программировании есть такое понятие, как "управление сложностью". Суть этого термина заключается в том,
# что на каждом этапе разработки мы должны прикладвыать максимум усилий в то чтобы,
# сложность нашего проекта не возрастала.
# Одни из инструментов данной цели является "Декомпозиция" или разделение чего-то целого на составные части.
# Декомпозицию можно проводить как на логическом, так и на физическом уровнях.
# Модуль и Пакет, это есть инструменты декомпозиции програмного кода. Модуль, это маленький элемент декомпозиции,
# это файл с расширением .ру, в состав которого входят некие ф-и, объединенные некоторой логикой и, возможно,
# некоторым исполняемым кодом.
# Пакет, это целый каталог файлов, который вкоючает в себя как модули, так и другие пакеты. Он также содержит
# файл __init__.py, где находится служебная информация.
# Модуль, это локальный инструмент, где реализованы конкретные ф-и конкретного проекта. Его можно передавать от одного
# проекта к другому.
# Пакет же, это более масштабный инструмент. В него входят все зависимости, которые есть в модуле.
# Модуль может требовать зависимости от стандартных библиотек random, os или sys и в пакете все это предустановлено.
# Есть возможность установить пакет в любую среду разработки и работать с его функционалом в любой среде.

# Импорт модулей и пакетов
# Процес импорта похож на передачу некой коробки
# Обычное выражение для импорта: import module
# После этого подтягиваются все функции из этого модуля. При этом, чтобы применить ф-ю из модуля,
# надо использовать '.' после названия объекта, к которому мы применяем эту ф-ю.
# Можно переименовать Модуль в короткую абривиатуру mod и использовать его в качестве инструмента для вызова модуля
# import module as mod
# Можно из модуля импортировать отдельные ф-и.
# from module import func1, func2
# При этом ф-и можно переименовывать
# from module import func1 as f1, func2 as f2
# и далее в програмном коде будем обращаться к ним по этим коротким именам.
# Или импортировать сразу все ф-и модуля
# from module import*
#

# -------------------------------------- МОДУЛИ ---------------------------------

# Основные модули в Питоне
# os - работает с операционной системой.
# Он позволяет добавлять и удалять папки, смотреть адресе файлов и другие функции файлового менеджера или проводника.
import os  # импорт всего модуля

# После импорта модуля, мы можем вызывать любую ф-ю из данного модуля путем следующего кода:

print(os.getcwd())  # ф-я для определения текущей дирректории/папки, в которой ведется работа.
# C:\Users\Lenovo 330s\PycharmProjects\Python_lessons

# Импорт конкретной ф-и
from os import mkdir

# теперь мы можем использовать данную ф-и для создания дирректории/папки без приамбулы os.
# mkdir('test')
# Повторный вызов этого кода приедет к ошибке, так как папка уже создана.
# Поэтому закомментирована после создания дирректории
# В левом окне среды разработки появилась дирректория/папка 'test'
# Сейчас мы эту ф-ю испльзовали уже без приставки os


# При импорте ф-и можно назвать ее по другому, как нам удобно
# Например, импоритруем ф-ю удаления дирректорий

from os import rmdir as remover

# и удалим дирректорию, которую только что создали
# remover('test')
# # Повторный вызов этого кода приедет к ошибке, так как папка уже удалена.
# Поэтому закомментировать после удаления дирректории.

# Можно модуль импортировать целиком, используя *. Но, так делать не рекоммендуется,
# так как иногда имена ф-и из разных модулей пересекаются и может возникнуть конфликт имен.
from os import *
# Теперь, все ф-и из модуля os мы можем использовать без приамбулы .os

# Нужно понимать, что когда мы импорируем модуль, то весь этот код компилируется и исполняется.
# То есть все ф-и модуля запоминаются, а если есть какие-то файлы для исполнения, то они исполняются.

# Еще пара популярных ф-й из библиотки os
# Ф-я получения всего содержимого текущего каталога
# это ф-я walk(). На вход для нее мы должны передать дирректорию, из которой мы хотим получить информацию.
# Подадим текущую дирректорию, и приведем данные, которые возвращает ф-я walk() к типу list
print(list(walk(getcwd())))
# Получаем очень длинный список файлов, расширений и всего содержимого, которое есть в данной дирректории.

# --------------------------------------- ПАКЕТЫ ------------------------------------

# Пакет, это дирриекория, которая содержит в себе другие пакеты и модули.
# В каждом пакете/дирректории есть файл __init__.py
# Раньше, в Python 2 в нем прописывалась служебная информация. В Python 3 этого требования уже нет.
# Сейчас в __init__ прописываются некоторые вещи для упрощения наименования функций.

# Чтобы импортировать пакет, он должен находится в дирректории, которая должна входить в специальный список,
# который можно посомотреть, набрав команду sys.path
# Пакет, это самый распространенный способ для переиспользования кода и для передачи кода
# Можно создать свой собственный пакет и залить его на pocket index - это портал, откуда можно загрузить
# с помощью pip сервисный пакет

# 7 --> main


